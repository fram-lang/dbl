import /List

import open Types
import open Width

pub let ppEmpty = doc DEmpty (fixedWidth 0)

pub let ppStr (str : String) = doc (DStr str) (fixedWidth str.length)

pub let ppReset d = doc (DReset d) d.width.reset

pub let ppShift d = doc (DShift d) d.width.shift

pub let ppSeq ds = 
  doc 
    (DSeq ds) 
    (List.foldRight 
      (fn (d : Doc) (w : Width) => d.width.seq w)
      ds
      (fixedWidth 0))

pub let ppStack ds =
  doc
    (DStack ds)
    (List.foldRight
      (fn (d : Doc) (w : Width) => d.width.stack w)
      ds
      (fixedWidth 0))

pub let ppLayout l d = doc (DLayout l d) (fixedWidth l)

pub let ppColor c d = doc (DColor c d) d.width

pub let ppBox d = doc (DBox d) (d.width.addFixed 2)

pub let ppFlex n = doc (DFlex n) (fixedWidth 0 >. addFlex n)

pub let ppMon d1 d2 = doc (DMon d1 d2) (d1.width.seq d2.width)

pub let (<+>) d1 d2 = ppSeq [d1, d2]

pub let (/+/) d1 d2 = ppStack [d1, d2]

pub let (<>) d1 d2 = ppMon d1 d2

pub let ppLine = 
  doc
    (DExtra "Line" () (fn size _ => qCtx [LineC {width=size, line=LFill size "─" LEmp}] size))
    (fixedWidth 0 >. addFlex 1)

pub let ppSep = 
  doc
    (DExtra "Sep" () (fn _ _ => ctxBox [LineC {width=3, line=LStr " │ " LEmp}] (LineC {width=3, line=LStr " │ " LEmp}) 3))
    (fixedWidth 3)
