(* This example demonstrates the use of effect handlers 
  to implement a backtracking search for Pythagorean triples. *)

import List

data Triples = Triple of Int, Int, Int

(* The standard backtracking effect. *)
data BT (effect E) = BT of
  { flip : Unit ->[E] Bool
  , fail : {type X} -> Unit ->[E] X
  }

method flip {E, self = BT { flip } : BT E} = flip
method fail {E, self = BT { fail } : BT E} = fail

(* The method `choose` on `BT` non-deterministically selects a number
  from a given range. It's defined recursively using `fix` from the standard
  library. *)
method choose {E, self : BT E} = fix (fn choose (a: Int) (b: Int) =>
  if a >= b  then self.fail () 
  else if self.flip () then a
  else choose (a + 1) b)

(* The method `triples` generates a Pythagorean triple. *)
method triples {E, self : BT E} (n : Int) =
  let a = self.choose 1 n in
  let b = self.choose a n in
  let c = self.choose b n in
  if a * a + b * b == c * c then Triple a b c
  else self.fail ()


implicit `bt {E_bt} : BT E_bt

(* The function `takeFirst` returns the first triple found. *)
let takeFirst (f : {effect=E} -> BT E -> Int ->[E|_] _) (n: Int) =
  handle bt = BT { flip = effect () / r =>
    match r True with
    | None   => r False
    | Some x => Some x
    end
  , fail = effect () => None
  }
  return x => Some x
  in f bt n

(* The function `takeAll` returns list of all triples found. *)
let takeAll (f : {effect=E} -> BT E -> Int ->[E|_] _) (n: Int) =
  handle bt = BT
    { flip = effect () / r => List.append (r True) (r False)
    , fail = effect () => []
    }
  return x => [x]
  in f bt n

(* Printing utilities *)
let printTriple t = 
  match t with
  | Triple a b c => printStrLn ( 
    "(" + a.toString + " " + b.toString + " " + c.toString + ")")
  end

let printList = fix (fn printList xs =>
  match xs with
  | [] => printStrLn ""
  | t :: xs => let _ = printTriple t in
                       printList xs
  end)

(* Main program *)
let maxValue = 25

let _ = printStrLn "First triple only:"
let _ =  match takeFirst (fn `bt => `bt.triples) maxValue with
  | None => printStrLn "None"
  | Some t => printTriple t
  end

let _ = printStrLn "All triples:"
let _ =  let res = takeAll (fn `bt => `bt.triples) maxValue
  in printList res
