(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
 *)

import open Types
import open Operators

pub method toString = (extern dbl_intToString : Int -> String) self

pub method equal = (extern dbl_eqInt  : Int -> Int -> Bool) self
pub method neq   = (extern dbl_neqInt : Int -> Int -> Bool) self
pub method gt    = (extern dbl_gtInt  : Int -> Int -> Bool) self
pub method lt    = (extern dbl_ltInt  : Int -> Int -> Bool) self
pub method ge    = (extern dbl_geInt  : Int -> Int -> Bool) self
pub method le    = (extern dbl_leInt  : Int -> Int -> Bool) self

pub method add = (extern dbl_addInt : Int -> Int -> Int) self
pub method sub = (extern dbl_subInt : Int -> Int -> Int) self
pub method mul = (extern dbl_mulInt : Int -> Int -> Int) self

pub method div {`re : {type X} -> Unit ->[|_] X} (n : Int) =
  if n.equal 0 then `re ()
  else (extern dbl_divInt : Int -> Int -> Int) self n

pub method mod {`re : {type X} -> Unit ->[|_] X} (n : Int) =
  if n.equal 0 then `re ()
  else (extern dbl_modInt : Int -> Int -> Int) self n

pub method neg {self : Int} = 0 - self

pub method land = (extern dbl_andInt : Int -> Int -> Int) self
pub method lor  = (extern dbl_orInt  : Int -> Int -> Int) self
pub method lxor = (extern dbl_xorInt : Int -> Int -> Int) self

pub method shiftl  = (extern dbl_lslInt : Int -> Int -> Int) self
pub method shiftr  = (extern dbl_lsrInt : Int -> Int -> Int) self
pub method ashiftr = (extern dbl_asrInt : Int -> Int -> Int) self
