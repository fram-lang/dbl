{# This file is part of DBL, released under MIT license.
 # See LICENSE for details.
 #}

import open Types
import open Operators
import open Assert
import Int

pub method equal = (extern dbl_eqInt64  : Int64 -> Int64 -> Bool)
pub method neq   = (extern dbl_neqInt64 : Int64 -> Int64 -> Bool)
pub method gt    = (extern dbl_gtInt64  : Int64 -> Int64 -> Bool)
pub method lt    = (extern dbl_ltInt64  : Int64 -> Int64 -> Bool)
pub method ge    = (extern dbl_geInt64  : Int64 -> Int64 -> Bool)
pub method le    = (extern dbl_leInt64  : Int64 -> Int64 -> Bool)

pub method neg = (extern dbl_negInt64 : Int64 -> Int64)
pub method add = (extern dbl_addInt64 : Int64 -> Int64 -> Int64)
pub method sub = (extern dbl_subInt64 : Int64 -> Int64 -> Int64)
pub method mul = (extern dbl_mulInt64 : Int64 -> Int64 -> Int64)
pub method div (self : Int64) (n : Int64) =
  assert {msg="Division by zero"} (n.neq 0L);
  (extern dbl_divInt64 : Int64 -> Int64 -> Int64) self n
pub method mod (self : Int64) (n : Int64) =
  assert {msg="Division by zero"} (n.neq 0L);
  (extern dbl_modInt64 : Int64 -> Int64 -> Int64) self n

pub method land = (extern dbl_andInt64 : Int64 -> Int64 -> Int64)
pub method lor  = (extern dbl_orInt64  : Int64 -> Int64 -> Int64)
pub method lxor = (extern dbl_xorInt64 : Int64 -> Int64 -> Int64)
pub method shiftl  = (extern dbl_lslInt64 : Int64 -> Int64 -> Int64)
pub method shiftr  = (extern dbl_lsrInt64 : Int64 -> Int64 -> Int64)
pub method ashiftr = (extern dbl_asrInt64 : Int64 -> Int64 -> Int64)

pub method succ (self : Int64) = self + 1L
pub method pred (self : Int64) = self - 1L

pub method toString = (extern dbl_int64ToString : Int64 -> String)
pub method toIntErr { ~onError } (self : Int64) =
  if self <= Int.maxValue.toInt64 && self >= Int.minValue.toInt64 then
    (extern dbl_int64ToInt : Int64 -> Int) self
  else ~onError ()
pub method toInt (self : Int64) =
  if self <= Int.maxValue.toInt64 && self >= Int.minValue.toInt64 then
    Some ((extern dbl_int64ToInt : Int64 -> Int) self)
  else None

pub method abs (self : Int64) =
  if self < 0L then self.neg else self
pub method min (self : Int64) oth =
  if self <= oth then self else oth
pub method max (self : Int64) oth =
  if self >= oth then self else oth
