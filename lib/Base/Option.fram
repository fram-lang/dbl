{# This file is part of DBL, released under MIT license.
 # See LICENSE for details.
 #}

import open /Base/Types
import open /Base/Assert
import open /Base/String
import open /Base/Operators

{## For `Some x` returns `x`, otherwise the provided argument is returned. ##}
pub method unwrapOr self default =
  match self with
  | None   => default
  | Some x => x
  end

{## For `Some x` returns `x`, otherwise the function `~onError` is called and
  its result returned. ##}
pub method unwrapErr {~onError} self =
  match self with
  | None   => ~onError ()
  | Some x => x
  end

{## This method should only be called on `Some x` values, in which case it
  returns `x`. When applied to `None` the entire program crashes irrecoverably
  with a runtime error. The resulting error message can be optionally specified
  with `?msg`. ##}
pub method unwrap {?msg} self =
  match self with
  | None   => runtimeError (msg.unwrapOr "Called `unwrap` on `None`")
  | Some x => x
  end

pub method toString
  { type X, method toString : X ->> String }
  (self : Option X) =
  match self with
  | None => "None"
  | Some x => "Some " + x.toString
  end

pub method format
  { type X, method format : X -> Option Unit ->> String }
  (self : Option X)
  (fmt : Option Unit) =
  match self with
  | None => "None"
  | Some x => "Some " + x.format None
  end
