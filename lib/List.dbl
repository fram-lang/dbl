pub let rec map f xs =
  match xs with
  | []      => []
  | x :: xs => f x :: map f xs
  end

pub let rec filter f xs =
  match xs with
  | []      => []
  | x :: xs => if f x then x :: filter f xs else filter f xs
  end

pub let rec append xs ys =
  match xs with
  | []      => ys
  | x :: xs => x :: append xs ys
  end

pub let rec concat xss =
  match xss with
  | []        => []
  | xs :: xss => append xs (concat xss)
  end

pub let rec iter f xs =
  match xs with
  | []      => ()
  | x :: xs => let () = f x in iter f xs
  end

pub let iter2 {`re : {type X} -> Unit ->[|_] X} =
  let rec iter f xs ys =
    match xs, ys with
    | [],      []      => ()
    | x :: xs, y :: ys => let () = f x y in iter f xs ys
    | _                => `re ()
  end
  in iter
