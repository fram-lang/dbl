pub let map f = fix (fn map xs =>
  match xs with
  | []      => []
  | x :: xs => f x :: map xs
  end)

pub let filter f = fix (fn filter xs =>
  match xs with
  | []      => []
  | x :: xs => if f x then x :: filter xs else filter xs
  end)

pub let append xs ys = fix (fn append xs =>
  match xs with
  | []      => ys
  | x :: xs => x :: append xs
  end) xs

pub let concat = fix (fn concat xss =>
  match xss with
  | []        => []
  | xs :: xss => append xs (concat xss)
  end)

pub let iter f = fix (fn iter xs =>
  match xs with
  | []      => ()
  | x :: xs => let () = f x in iter xs
  end)

pub let iter2 {`re : {type X} -> Unit ->[|_] X} f =
  fix (fn iter xs ys =>
  match xs, ys with
  | [],      []      => ()
  | x :: xs, y :: ys => let () = f x y in iter xs ys
  | _                => `re ()
  end)
