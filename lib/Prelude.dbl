data Bool = False | True

data Option A = None | Some of A

data rec Nat = Zero | Succ of Nat

data rec List A = Nil | Cons of A, List A

data Pair X Y = Pair of X, Y

let id x = x

let flip f x y = f y x

let fst (Pair x _) = x
let snd (Pair _ y) = y

let fix {type A, type B, type E} f =
  data rec Fix = Fix of (Fix -> A ->[|E] B)
  let fi ix x = let Fix fi = ix in f (fi ix) x in
  fi (Fix fi)

let map f = fix (fn map xs =>
  match xs with
  | Nil       => Nil
  | Cons x xs => Cons (f x) (map xs)
  end)

let filter f = fix (fn filter xs =>
  match xs with
  | Nil       => Nil
  | Cons x xs => if f x then Cons x (filter xs) else filter xs
  end)

let append xs ys = fix (fn append xs =>
  match xs with
  | Nil       => ys
  | Cons x xs => Cons x (append xs)
  end) xs

let concat = fix (fn concat xss =>
  match xss with
  | Nil         => Nil
  | Cons xs xss => append xs (concat xss)
  end)

let iter f = fix (fn iter xs =>
  match xs with
  | Nil       => ()
  | Cons x xs => let _ = f x in iter xs
  end)

let iter2 {`re : {type X} -> Unit ->[|_] X} f =
  fix (fn iter xs ys =>
  match xs with
  | Nil       =>
    match ys with
    | Nil       => ()
    | Cons _ _  => `re ()
    end
  | Cons x xs =>
    match ys with
    | Nil       => `re ()
    | Cons y ys => let _ = f x y in iter xs ys
    end
  end)

let not b = if b then False else True

method toString = if self then "True" else "False"

method band b = if self then b else False
method bor b  = if self then True else b

method equal = (extern dbl_eqInt  : Int -> Int -> Bool) self
method neq   = (extern dbl_neqInt : Int -> Int -> Bool) self
method gt    = (extern dbl_gtInt  : Int -> Int -> Bool) self
method lt    = (extern dbl_ltInt  : Int -> Int -> Bool) self
method ge    = (extern dbl_geInt  : Int -> Int -> Bool) self
method le    = (extern dbl_leInt  : Int -> Int -> Bool) self

method toString = (extern dbl_intToString : Int -> String) self

method add = (extern dbl_addInt : Int -> Int -> Int) self
method sub = (extern dbl_subInt : Int -> Int -> Int) self
method mul = (extern dbl_mulInt : Int -> Int -> Int) self

method div {`re : {type X} -> Unit ->[|_] X} (n : Int) =
  if n.equal 0 then `re ()
  else (extern dbl_divInt : Int -> Int -> Int) self n

method mod {`re : {type X} -> Unit ->[|_] X} (n : Int) =
  if n.equal 0 then `re ()
  else (extern dbl_modInt : Int -> Int -> Int) self n

method land = (extern dbl_andInt : Int -> Int -> Int) self
method lor  = (extern dbl_orInt  : Int -> Int -> Int) self
method lxor = (extern dbl_xorInt : Int -> Int -> Int) self

method shiftl  = (extern dbl_lslInt : Int -> Int -> Int) self
method shiftr  = (extern dbl_lsrInt : Int -> Int -> Int) self
method ashiftr = (extern dbl_asrInt : Int -> Int -> Int) self

method add = (extern dbl_strCat : String -> String -> String) self

method equal = (extern dbl_eqStr  : String -> String -> Bool) self
method neq   = (extern dbl_neqStr : String -> String -> Bool) self
method gt    = (extern dbl_gtStr  : String -> String -> Bool) self
method lt    = (extern dbl_ltStr  : String -> String -> Bool) self
method ge    = (extern dbl_geStr  : String -> String -> Bool) self
method le    = (extern dbl_leStr  : String -> String -> Bool) self

method length = (extern dbl_strLen : String -> Int) self
method get {`re : {type X} -> Unit ->[|_] X, self : String} (n : Int) =
  if (n.ge 0).band (n.lt self.length) then
    (extern dbl_strGet : String -> Int -> Int) self n
  else `re ()

method makeString {`re : {type X} -> Unit ->[|_] X, self : String} (n : Int) =
  if (n.ge 0).band (n.lt 256) then
    (extern dbl_strMake : Int -> String) n
  else `re ()

let printStrLn = extern dbl_printStrLn : String ->[IO] Unit
let printStr   = extern dbl_printStr   : String ->[IO] Unit
let printInt   = extern dbl_printInt   : Int ->[IO] Unit

let readLine = extern dbl_readLine : Unit ->[IO] String

let exit {type X} = extern dbl_exit : Int ->[IO] X


method fn (+) = add
method fn (-) = sub
method fn (%) = mod
method fn (/) = div
method fn ( * ) = mul

method fn (==) = equal
method fn (!=) = neq
method fn (>)  = gt
method fn (>=) = ge
method fn (<)  = lt
method fn (<=) = le

method fn (&) = land
method fn (^) = lxor
method fn (>>) = shiftl
method fn (<<) = shiftr
method fn (>>>) = ashiftr

method fn (&&) = band
method fn (||) = bor
