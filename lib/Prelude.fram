(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
 *)

import /Base/Types
import /Base/Operators
import /Base/Bool
import /Base/Int
import /Base/Char
import /Base/String

pub open Types
pub open Operators

pub let id x = x

pub let flip f x y = f y x

pub let fst (x, _) = x
pub let snd (_, y) = y

pub let not b = if b then False else True

pub let charListToStr = (extern dbl_chrListToStr : List Char -> String)

pub let chr {`re : {type X} -> Unit ->[|_] X} (n : Int) = 
  if n >= 0 && n < 256 then
    (extern dbl_intToChr : Int -> Char) n
  else
    `re ()

pub let printStrLn = extern dbl_printStrLn : String ->[IO] Unit
pub let printStr   = extern dbl_printStr   : String ->[IO] Unit
pub let printInt   = extern dbl_printInt   : Int ->[IO] Unit

pub let readLine = extern dbl_readLine : Unit ->[IO] String

pub let exit {type X} = extern dbl_exit : Int ->[IO] X
