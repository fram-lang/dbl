{# This file is part of DBL, released under MIT license.
 # See LICENSE for details.
 #}

import /Base/Types
import /Base/Operators
import /Base/Assert
import /Base/Bool
import /Base/Option
import /Base/Int
import /Base/Int64
import /Base/Char
import /Base/String
import /Base/Format

pub open Types
pub open Operators
pub open Assert
pub open Format

pub let id x = x

pub let flip f x y = f y x

pub let fst (x, _) = x
pub method fst = fst
pub let snd (_, y) = y
pub method snd = snd

pub let not b = if b then False else True

pub let charListToStr = (extern dbl_chrListToStr : List Char -> String)

pub let chr {~onError : Unit ->[_] Char} (n : Int) =
  if n >= 0 && n < 256 then
    (extern dbl_intToChr : Int -> Char) n
  else
    ~onError ()

pub let printStrLn = extern dbl_printStrLn : String ->[IO] Unit
pub let printStr   = extern dbl_printStr   : String ->[IO] Unit
pub let printInt   = extern dbl_printInt   : Int ->[IO] Unit

pub let readLine = extern dbl_readLine : Unit ->[IO] String

pub let exit {type X} = extern dbl_exit : Int ->[IO] X

pub module Int64
  pub let zero = 0L
  pub let one  = 1L
  pub let ofInt (n : Int) = n.toInt64
end

pub let max (x : Int) (y : Int) =
  if x > y then x else y

pub let strListCat = extern dbl_strListCat : List String -> String

pub let rec mkStr (s : String) (l : Int) = 
  if l <= 0 then
    ""
  else if l % 2 == 0 then
   (let s' = mkStr s (l / 2) in
    s' + s')
  else
   (let s' = mkStr s (l / 2) in
    s' + (s' + s))
