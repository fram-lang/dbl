(* This file is part of DBL, released under MIT license.
 * See LICENSE for details.
 *)

(** Common definitions of the effect inference *)

module S = Lang.Unif
module T = Lang.ConE

include BiDirectional

(** Origin of a constraint. *)
type origin =
  | OExprType of Position.t * PPTree.t * T.typ * T.typ
    (** Constraint generated during type checking of an expression. *)

  | OExprEffect of Position.t * PPTree.t * T.effct * T.effct
    (** Constraint generated during effect checking of an expression. *)

  | OInst of Position.t * PPTree.t * T.tvar list * T.constr list * T.scheme
    (** Constraint generated during instantiation of a scheme. *)

  | ODataScope of Position.t * PPTree.t * T.typ * T.ceffect
    (** Constraint generated during checking if data definitions doesn't
      escape their scope. *)

  | OHandlerScope of Position.t * PPTree.t * T.tvar * T.typ
    (** Constraint generated during checking if the handled effect by the
      first-class handler doesn't escape its scope. *)

  | OPatternType of Position.t * PPTree.t * T.typ * T.typ
    (** Constraint generated during type checking of a pattern. *)

  | OPatternScheme of Position.t * PPTree.t * T.scheme * T.scheme
    (** Constraint generated during scheme checking of a pattern. *)

  | OLabelAnnot of Position.t * PPTree.t * T.typ * T.typ
    (** Constraint generated during checking of label annotation. *)

  | OSubEffect of origin * T.effct * T.effct
    (** Constraint generated by checking subeffecting in a situation
      described in given origin parameter. *)

  | OEffectEquiv of origin * T.effct * T.effct
    (** Constraint generated by checking effect equivalence in a situation
      described in given origin parameter. *)
