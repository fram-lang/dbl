data Option A = None | Some of A

data State (effect E) X = State of
  { get    : Unit ->[E] X
  , put    : X ->[E] Unit
  }

implicit `st {E_st} : State E_st _

let get x =
  let (State { get }) = `st in
  get x

let put x =
  let (State { put }) = `st in
  put x

handle `st =
  let get = effect x / r => fn s => r s  s
  let put = effect s / r => fn _ => r () s
  in State { get, put }
  return  x => fn _ => x
  finally c => c None

let putSome f =
  put (Some f)

let _ =
  match get () with
  | None   => ()
  | Some f => f ()
  end
