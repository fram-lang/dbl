data Sqr A = (,) of A, A
data rec Tree A = Leaf | Node of Tree (Sqr A)

let rec (map : {A,B,E} -> (A ->[|E] B) -> Tree A ->[|E] Tree B) =
  fn f t =>
    match t with
    | Leaf   => Leaf
    | Node t => Node (map (fn (x, y) => (f x, f y)) t)
    end
