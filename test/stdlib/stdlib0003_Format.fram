import open Format

# Unit
let _ = 
  assert (().format None == "()");
  let fmt = UnitFmt {unit="Unit"} in
  assert (().format (Some fmt) == "Unit");
  let fmt = UnitFmt {size=5, fill='#', alignLeft=True} in
  assert (().format (Some fmt) == "()###");
  let fmt = UnitFmt {size=4, fill='?', unit="U"} in
  assert (().format (Some fmt) == "???U")

# Bool
let _ = 
  assert ((True).format None == "True");
  assert ((False).format None == "False");
  let fmt = BoolFmt {true="#t", false="#f", size=3} in
  assert ((True).format (Some fmt) == " #t");
  assert ((False).format (Some fmt) == " #f")

# Int
let _ = 
  assert (10.format None == "10");
  assert ((-10 : Int).format None == "-10");
  let (num : Int) = ((15 * 36 + 27) * 36 + 10) * 36 + 22
  let fmt = IntFmt { prefix="36x", base=36} in
  assert (num.format (Some fmt) == "36xFRAM")

# Char
let _ =
  assert ('a'.format None == "'a'");
  assert ('\xFF'.format None == "'\\xFF'");
  let fmt = CharFmt {escape=False, size=3} in
  assert ('\n'.format (Some fmt) == "  \n");
  let fmt = CharFmt {asInt=IntFmt {base=16, prefix="\\x"}} in
  assert (' '.format (Some fmt) == "\\x20")

# String
let _ =
  assert ("abc".format None == "\"abc\"");
  assert ("\n\t\r".format None == "\"\\n\\t\\r\"");
  let fmt = StringFmt {escape=False} in
  assert ("\n\t\r".format (Some fmt) == "\n\t\r")

# List
let _ = 
  assert ([True, False].format None == "[True, False]");
  let fmt = ListFmt 
    { opn="[| ", cls=" |]", sep=" "
    , inner = BoolFmt {true="1", false="0"}} in
  assert ([True, False].format (Some fmt) == "[| 1 0 |]")

# Option
let _ =
  assert ((Some ()).format None == "Some ()");
  assert ((None : Option Unit).format None == "None");
  let fmt = OptionFmt 
    { some = "S", none = "N"
    , inner = UnitFmt {unit = "U"}} in
  assert ((Some ()).format (Some fmt) == "SU")

# Either
let _ =
  assert ((Left 10   : Either Int String).format None == "Left 10");
  assert ((Right "a" : Either Int String).format None == "Right \"a\"");
  let fmt = EitherFmt
    { left="L ", right="R "
    , innerL=IntFmt {prefix="(dec)"}
    , innerR=StringFmt {escape=False} } in
  assert ((Left 10   : Either Int String).format (Some fmt) == "L (dec)10");
  assert ((Right "a" : Either Int String).format (Some fmt) == "R a")

# Pair
let _ =
  assert (((), 'a').format None == "((), 'a')");
  let fmt = PairFmt
    { opn="<|", sep="+", cls="|>"
    , fst=UnitFmt{unit="UNIT"}
    , snd=CharFmt{escape=False} } in
  assert (((), 'a').format (Some fmt) == "<|UNIT+a|>")

# Everything at once
let _ =
  let d = ("abc", [Left 10, Right (Some True), Right None])
  let fmt = PairFmt 
    { opn="{", cls="}"
    , fst=StringFmt{escape=False}
    , snd=ListFmt
      { opn="[|", cls="|]"
      , inner=EitherFmt
        { left="L", right="R"
        , innerL=IntFmt {base=2}
        , innerR=OptionFmt
          { none = "N", some ="S"
          , inner = BoolFmt {true="T", false="F"}}}}} in
  assert (d.format None == "(\"abc\", [Left 10, Right Some True, Right None])");
  assert (d.format (Some fmt) == "{abc, [|L1010, RST, RN|]}")
